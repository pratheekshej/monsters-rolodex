{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","width","height","key","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","class","App","e","setState","searchField","target","value","state","val","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAGaA,G,kBAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,aACHC,MAAM,MACNC,OAAO,QAET,wBAAIC,IAAKR,EAAMI,QAAQC,IAAvB,IAA6BL,EAAMI,QAAQK,KAA3C,KACA,uBAAGD,IAAKR,EAAMI,QAAQC,IAAtB,IAA4BL,EAAMI,QAAQM,MAA1C,QCRSC,EAAW,SAAAX,GACtB,OACE,yBAAKC,UAAU,aAEXD,EAAMY,SAASC,IAAI,SAAAT,GAAO,OACxB,kBAAC,EAAD,CAAMI,IAAKJ,EAAQC,GAAID,QAASA,QCL7BU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,yBAAKf,UAAU,cACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,IAEZ,uBAAGG,MAAM,8BC+CFC,E,YArDb,aAAe,IAAD,8BAEZ,+CAuBFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAtBtC,EAAKC,MAAQ,CACXC,IAAK,iBACLf,SAAU,GACVW,YAAa,IAPH,E,iFAeO,IAAD,OAClBK,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEV,SAAUoB,Q,+BAgBnC,IAAD,EAC2BC,KAAKP,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZW,EAAmBtB,EAASuB,OAAO,SAAA/B,GAAO,OAC9CA,EAAQK,KAAK2B,cAAcC,SAASd,EAAYa,iBAElD,OACE,yBAAKnC,UAAU,OACb,kDACA,kBAAC,EAAD,CACEc,YAAY,iBACZC,aAAciB,KAAKjB,eAErB,6BANF,IAMQ,6BACN,kBAAC,EAAD,CAAUJ,SAAUsB,S,GAlDVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.880c28c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set3`}\r\n      width=\"180\"\r\n      height=\"180\"\r\n    />\r\n    <h2 key={props.monster.id}> {props.monster.name} </h2>\r\n    <p key={props.monster.id}> {props.monster.email} </p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from './../card/card.component';\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className='card-list'>\r\n      {\r\n        props.monsters.map(monster => (\r\n          <Card key={monster.id} monster={monster}/>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <div className=\"playground\">\r\n    <div className=\"container\">\r\n      <div className=\"content\">\r\n        <input\r\n          className=\"search\"\r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n        />\r\n        <i class=\"a-icon a-icon-search\"></i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  // <input\r\n  //     className='search'\r\n  //     type='search'\r\n  //     placeholder={placeholder}\r\n  //     onChange={handleChange}\r\n  // />\r\n);\r\n","import React, { Component } from 'react'; // import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n\n  constructor() {\n    // SUPER KEY INITIALIZATION\n    super();\n    // STATE VALUE DECLARATION\n    this.state = {\n      val: 'Pratheeksh E J',\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n\n  /**\n   * COMPONENT INIT METHOD AFTER RENDER\n   */\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n\n  /**\n   * HANDLE CHANGE EVENT METHOD\n   */\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n\n  /**\n   * RENDER METHOD\n   * <CardList name=\"PEJ\"/>\n   */\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1> MONSTERS ROLODEX </h1>\n        <SearchBox\n          placeholder='search doodles'\n          handleChange={this.handleChange}\n        />\n        <br/> <br/>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/**\n * <header className=\"App-header\">\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    <p>\n      Hey This is { this.state.val }\n    </p>\n    <button onClick={() => this.setState({val: 'P E J'})}>TRANSFORM</button>\n   </header>\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}